package com.dsv.pvt.fikafocus.user;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserService userService;

    public ResponseEntity<Object> generateResponse(String message, HttpStatus status, Object responseObj) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("message", message);
        map.put("status", status.value());
        map.put("data", responseObj);

        return new ResponseEntity<Object>(map,status);
    }

    //Create
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody com.dsv.pvt.fikafocus.user.UserEntity addNewUser (@RequestParam String email, @RequestParam String username, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        return userService.addNewUser(email, username, password);
    }
//    //Create lists.
//    @PostMapping(path="/addUsers")
//    public @ResponseBody List<com.dsv.pvt.fikafocus.user.UserEntity> addNewUsers(@RequestBody List<com.dsv.pvt.fikafocus.user.UserEntity> newEntities){
//        return userService.addNewUsers(newEntities);
//    }

    @GetMapping("/login")
    public ResponseEntity<Object> tryLogin(@RequestParam String email, @RequestParam String password) {

//        String urlHardCoded = "http://http://group-1-75.pvt.dsv.su.se/user/userById/" + email;
//        String requestBody = sendAPIRequest(urlHardCoded);
        UserEntity user = userService.getUserById(email);
        if(user.getPass().equals(password)) {
            return generateResponse("Successfully login!", HttpStatus.OK, null);
        } else {
            return generateResponse("Failed login", HttpStatus.MULTI_STATUS, null);
        }

//        try {
//            List<UserEntity> result = userService.Get();
//
//        } catch (Exception e) {
//
//        }
    }

    //Read
    @GetMapping(path="/all")
    public @ResponseBody List<com.dsv.pvt.fikafocus.user.UserEntity> getAllUsers() {
        // This returns a JSON with the users
        return userService.getAllUsers();
    }

    @GetMapping(path = "userById/{id}")
    public @ResponseBody UserEntity findUserById(@PathVariable String id){
        return userService.getUserById(id);
    }

    //Update
    @PutMapping(path="/update")
    public @ResponseBody com.dsv.pvt.fikafocus.user.UserEntity updateUser(@RequestBody com.dsv.pvt.fikafocus.user.UserEntity entity){
        return userService.updateUser(entity);
    }

    //Remove
    @DeleteMapping(path="/remove/{id}")
    public @ResponseBody String removeUser(@PathVariable String id){
        return userService.deleteUserById(id);
    }

    //Remove all instances
    @DeleteMapping(path="/removeall")
    public @ResponseBody String removeAllUser(){
        return userService.deleteAll();
    }

 /*   private String sendAPIRequest(String url){
        try {
            URL testUrl = new URL(url);
            URLConnection urlConnection = testUrl.openConnection();
            urlConnection.connect();
            BufferedReader bf = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            String input = "";

            StringBuilder line = new StringBuilder();
            while ((input = bf.readLine()) != null) {
                line.append(input);
            }
            bf.close();
            return line.toString();

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return e.getMessage();
        }
    }
*/
}
