package com.dsv.pvt.fikafocus.user;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserService userService;

    //Create
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody com.dsv.pvt.fikafocus.user.UserEntity addNewUser (@RequestBody com.dsv.pvt.fikafocus.user.UserEntity newEntity) {
        // @ResponseBody means the returned String is the response, not a view name
        return userService.addNewUser(newEntity);
    }
//    //Create lists.
//    @PostMapping(path="/addUsers")
//    public @ResponseBody List<com.dsv.pvt.fikafocus.user.UserEntity> addNewUsers(@RequestBody List<com.dsv.pvt.fikafocus.user.UserEntity> newEntities){
//        return userService.addNewUsers(newEntities);
//    }

//    @GetMapping("/login")
//    public String getLocations(@RequestParam String email, @RequestParam String password) throws IOException {
//
//        String urlHardCoded = "https://besttime.app/api/v1/venues/filter?api_key_private=pri_1957561c46a644fdaff49985493a50dc&busy_min=" + busy_min + "&busy_max=" + busy_max + "&types=CAFE&lat=" + lat + "&lng=" + lng + "&radius=" + radius + "&order_by=now%2Cnow&order=asc%2Cdesc&foot_traffic=both&limit=5&page=0";
//        return sendAPIRequest(urlHardCoded);
//    }

    //Read
    @GetMapping(path="/all")
    public @ResponseBody List<com.dsv.pvt.fikafocus.user.UserEntity> getAllUsers() {
        // This returns a JSON with the users
        return userService.getAllUsers();
    }

    @GetMapping(path = "userById/{id}")
    public @ResponseBody UserEntity findUserById(@PathVariable String id){
        return userService.getUserById(id);
    }

    //Update
    @PutMapping(path="/update")
    public @ResponseBody com.dsv.pvt.fikafocus.user.UserEntity updateUser(@RequestBody com.dsv.pvt.fikafocus.user.UserEntity entity){
        return userService.updateUser(entity);
    }

    //Remove
    @DeleteMapping(path="/remove/{id}")
    public @ResponseBody String removeUser(@PathVariable String id){
        return userService.deleteUserById(id);
    }

    //Remove all instances
    @DeleteMapping(path="/removeall")
    public @ResponseBody String removeAllUser(){
        return userService.deleteAll();
    }

}
